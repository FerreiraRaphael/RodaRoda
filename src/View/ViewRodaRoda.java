/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Confiracoes.Configuracao;
import Controllers.ControllerJogador;
import Controllers.ControllerRodaRoda;
import Observer.PalavraListener;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.json.simple.JSONObject;
import Observer.RodaListener;

/**
 *
 * @author raphael
 */
public class ViewRodaRoda extends javax.swing.JFrame implements RodaListener, PalavraListener {
    private final int numeroJogadores;
    private final ViewInicial vwInicial;
    private final ControllerRodaRoda controllerRodaRoda;
    private final Configuracao configuracoes;
    private boolean gameover;
    private ControllerJogador jogadorAtual;
    private int proximo;
    private int naRoda;
    

    /**
     * Creates new form ViewRodaRoda
     *
     * @param vwInicial
     * @param configuracao
     * @throws java.io.IOException
     */
    public ViewRodaRoda(ViewInicial vwInicial) throws IOException {
        initComponents();
        this.gameover = false;
        this.vwInicial = vwInicial;
        this.configuracoes = Configuracao.getInstance();
        this.controllerRodaRoda = new ControllerRodaRoda();
        this.controllerRodaRoda.controllerPalavra.addListener(this);
        this.numeroJogadores = configuracoes.getNumeroJogadores();
        this.jogadorAtual = null;
        setarValores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mainContainer = new javax.swing.JPanel();
        containerNorte = new javax.swing.JPanel();
        containerCentral = new javax.swing.JPanel();
        pnRoda = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        lbPontosNaRoda = new javax.swing.JLabel();
        pnCategoria = new javax.swing.JPanel();
        lbCategoria = new javax.swing.JLabel();
        lbCategoriaValue = new javax.swing.JLabel();
        pnPalavra = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbPalavraSecreta = new javax.swing.JLabel();
        pnErros = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lbError = new javax.swing.JLabel();
        lbErrosValue = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lbRestante = new javax.swing.JLabel();
        containerSul = new javax.swing.JPanel();
        pnBotoesAcao = new javax.swing.JPanel();
        btnTentar = new javax.swing.JButton();
        btnRodar = new javax.swing.JButton();
        pnTxtField = new javax.swing.JPanel();
        txtFldTentativa = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));

        mainContainer.setBackground(new java.awt.Color(158, 158, 158));
        mainContainer.setMinimumSize(new java.awt.Dimension(800, 600));
        mainContainer.setPreferredSize(new java.awt.Dimension(800, 600));
        mainContainer.setLayout(new java.awt.BorderLayout());

        containerNorte.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        containerNorte.setMaximumSize(new java.awt.Dimension(800, 200));
        containerNorte.setMinimumSize(new java.awt.Dimension(4, 200));
        containerNorte.setPreferredSize(new java.awt.Dimension(800, 200));
        containerNorte.setLayout(new java.awt.GridLayout(3, 1));
        mainContainer.add(containerNorte, java.awt.BorderLayout.NORTH);

        containerCentral.setBackground(new java.awt.Color(245, 245, 245));
        containerCentral.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        containerCentral.setMaximumSize(new java.awt.Dimension(800, 250));
        containerCentral.setMinimumSize(new java.awt.Dimension(0, 150));
        containerCentral.setPreferredSize(new java.awt.Dimension(800, 200));
        containerCentral.setLayout(new javax.swing.BoxLayout(containerCentral, javax.swing.BoxLayout.Y_AXIS));

        pnRoda.setLayout(new javax.swing.BoxLayout(pnRoda, javax.swing.BoxLayout.Y_AXIS));

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 60));

        jTextPane1.setBackground(new java.awt.Color(51, 51, 51));
        jTextPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTextPane1.setEnabled(false);
        jScrollPane1.setViewportView(jTextPane1);

        pnRoda.add(jScrollPane1);

        jPanel2.setPreferredSize(new java.awt.Dimension(796, 15));

        jLabel25.setText("Pontos na Roda :");
        jPanel2.add(jLabel25);
        jPanel2.add(lbPontosNaRoda);

        pnRoda.add(jPanel2);

        containerCentral.add(pnRoda);

        lbCategoria.setText("Categoria: ");
        pnCategoria.add(lbCategoria);
        pnCategoria.add(lbCategoriaValue);

        containerCentral.add(pnCategoria);

        jLabel1.setText("Palavra:");
        jPanel5.add(jLabel1);

        lbPalavraSecreta.setFont(new java.awt.Font("FreeMono", 1, 24)); // NOI18N
        jPanel5.add(lbPalavraSecreta);

        pnPalavra.add(jPanel5);

        containerCentral.add(pnPalavra);

        pnErros.setLayout(new javax.swing.BoxLayout(pnErros, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setPreferredSize(new java.awt.Dimension(100, 15));

        lbError.setText("Erros: ");
        jPanel3.add(lbError);
        jPanel3.add(lbErrosValue);

        pnErros.add(jPanel3);

        jPanel4.setPreferredSize(new java.awt.Dimension(796, 15));

        jLabel2.setText("Letras Restantes: ");
        jPanel4.add(jLabel2);
        jPanel4.add(lbRestante);

        pnErros.add(jPanel4);

        containerCentral.add(pnErros);

        mainContainer.add(containerCentral, java.awt.BorderLayout.CENTER);

        containerSul.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        containerSul.setMinimumSize(new java.awt.Dimension(200, 80));
        containerSul.setPreferredSize(new java.awt.Dimension(800, 100));
        containerSul.setLayout(new java.awt.BorderLayout());

        pnBotoesAcao.setPreferredSize(new java.awt.Dimension(800, 40));
        pnBotoesAcao.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 10));

        btnTentar.setText("Tentar");
        btnTentar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTentarMouseClicked(evt);
            }
        });
        pnBotoesAcao.add(btnTentar);

        btnRodar.setText("Rodar");
        btnRodar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRodarMouseClicked(evt);
            }
        });
        btnRodar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRodarActionPerformed(evt);
            }
        });
        pnBotoesAcao.add(btnRodar);

        containerSul.add(pnBotoesAcao, java.awt.BorderLayout.PAGE_START);

        pnTxtField.setMinimumSize(new java.awt.Dimension(70, 100));
        pnTxtField.setPreferredSize(new java.awt.Dimension(800, 40));
        pnTxtField.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txtFldTentativa.setMinimumSize(new java.awt.Dimension(60, 19));
        txtFldTentativa.setPreferredSize(new java.awt.Dimension(240, 25));
        txtFldTentativa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldTentativaActionPerformed(evt);
            }
        });
        txtFldTentativa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFldTentativaKeyTyped(evt);
            }
        });
        pnTxtField.add(txtFldTentativa);

        containerSul.add(pnTxtField, java.awt.BorderLayout.PAGE_END);

        mainContainer.add(containerSul, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(mainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRodarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRodarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRodarActionPerformed

    private void txtFldTentativaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldTentativaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldTentativaActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.setSize(900, 700);
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_formComponentShown

    private void btnRodarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRodarMouseClicked
        clearConsole();
        Object[] valor = controllerRodaRoda.rodar(jogadorAtual);
        boolean sorte = (boolean) valor[0];
        naRoda = (int) valor[1];
        if (sorte) {
            lbPontosNaRoda.setText(Integer.toString(naRoda));
            trava(false);
            console("Você tirou sorte,"
                    + " tem a change de tentar uma letra ou a palavra inteira,"
                    + " se acertar ira ganhar " + naRoda + " pontos");
        } else {
            console("Você tirou azar,"
                    + " perdeu a vez,");
            if (naRoda == 1) {
                console(" e perdeu todos seus pontos na roda :(");
                jogadorAtual.somarPontosNaRoda(0);
            }
            proximo();
        }
    }//GEN-LAST:event_btnRodarMouseClicked

    private void btnTentarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTentarMouseClicked
        String tentativa = txtFldTentativa.getText();
        try {
            verificarTentativa(tentativa);
        } catch (IOException ex) {
            Logger.getLogger(ViewRodaRoda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTentarMouseClicked

    private void txtFldTentativaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFldTentativaKeyTyped

    }//GEN-LAST:event_txtFldTentativaKeyTyped

    private void setarValores() throws IOException {
        controllerRodaRoda.addListener(this);
        ArrayList<String> nomes = new ArrayList<>();
        for (int i = 1; i <= numeroJogadores; i++) {
            String nome = JOptionPane.showInputDialog("Qual o nome do Jogador " + i);
            if ("".equals(nome) || nome == null) {
                nome = "Jogador " + i;
            }
            if (!nomeJaExiste(nomes, nome)) {
                nomes.add(nome);
                ContainerJogador ctJogador = new ContainerJogador();
                containerNorte.add(ctJogador);
                ControllerJogador jogador = new ControllerJogador(nome, ctJogador);
                controllerRodaRoda.addJogador(jogador);
            } else {
                JOptionPane.showMessageDialog(this, "Este nome já existe");
                i--;
            }
        }
    }

    private boolean nomeJaExiste(ArrayList<String> nomes, String novoNome) {
        boolean existe = false;
        for (String nome : nomes) {
            if (nome.equals(novoNome)) {
                existe = true;
            }
        }
        return existe;
    }

    private boolean verificaLetra(String s) {
        s = s.toLowerCase();
        boolean erro = !lbErrosValue.getText().contains(s);
        boolean restante = lbRestante.getText().contains(s);
        if (!erro) {
            JOptionPane.showMessageDialog(this, "Tente nunca cometer os mesmo erros jovem");
        } else if (!restante) {
            JOptionPane.showMessageDialog(this, "Tente só as letras restantes por favor");
        }
        return erro && restante;
    }

    private void verificarTentativa(String tentativa) throws IOException {
        tentativa = tentativa.toLowerCase();
        if (tentativa.equals("")) {
            JOptionPane.showMessageDialog(this, "Escreva alguma coisa");
        } else if (tentativa.length() > 1) {
            int resposta;
            resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja tentar a palavra ?", "Atenção", 0);
            if (resposta == 0) {
                controllerRodaRoda.tentar(tentativa, true);
            }
            else{
                txtFldTentativa.setText("");
            }
        } else if (verificaLetra(tentativa)) {
            controllerRodaRoda.tentar(tentativa, false);
        }
        txtFldTentativa.setText("");
    }

    private void clearConsole() {
        jTextPane1.setText("");
    }

    private void console(String texto) {
        String corpo = jTextPane1.getText();
        jTextPane1.setText(corpo + texto);
    }

    private void trava(boolean lock) {
        btnRodar.setVisible(lock);
        btnTentar.setVisible(!lock);
        txtFldTentativa.setVisible(!lock);
        if (lock) {
            lbPontosNaRoda.setText("");
        } else {
            txtFldTentativa.requestFocus();
        }
    }

    private void proximo() {
        jogadorAtual = controllerRodaRoda.proximo();
        console(" É a vez do jogador "+jogadorAtual.nome);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRodar;
    private javax.swing.JButton btnTentar;
    private javax.swing.JPanel containerCentral;
    private javax.swing.JPanel containerNorte;
    private javax.swing.JPanel containerSul;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lbCategoria;
    private javax.swing.JLabel lbCategoriaValue;
    private javax.swing.JLabel lbError;
    private javax.swing.JLabel lbErrosValue;
    private javax.swing.JLabel lbPalavraSecreta;
    private javax.swing.JLabel lbPontosNaRoda;
    private javax.swing.JLabel lbRestante;
    private javax.swing.JPanel mainContainer;
    private javax.swing.JPanel pnBotoesAcao;
    private javax.swing.JPanel pnCategoria;
    private javax.swing.JPanel pnErros;
    private javax.swing.JPanel pnPalavra;
    private javax.swing.JPanel pnRoda;
    private javax.swing.JPanel pnTxtField;
    private javax.swing.JTextField txtFldTentativa;
    // End of variables declaration//GEN-END:variables

    @Override
    public void acertou(String palavra, String restante) {
        clearConsole();
        jogadorAtual.somarPontosNaRoda(naRoda);
        lbPalavraSecreta.setText(palavra);
        lbRestante.setText(restante);
        if(palavra.contains("_"))
        console("Parabêns "+ jogadorAtual.nome +", você acertou e recebeu " + naRoda + " pontos"
                + ", jogue novamente");
        trava(true);
    }

    @Override
    public void errou(String erros, String restante, boolean errouPalavra) {
        lbErrosValue.setText(erros);
        lbRestante.setText(restante);
        clearConsole();
        if (numeroJogadores == 1) {
            jogadorAtual.erros++;
            controllerRodaRoda.verificarErros(jogadorAtual, errouPalavra);
        }
        if(errouPalavra)
            console(jogadorAtual.nome + " errou e não recebeu os pontos");
        else
            console(jogadorAtual.nome + " errou a palavra");
        proximo();
        trava(true);
    }

    @Override
    public void gameover(ControllerJogador vencedor) {
        this.gameover = true;
        if(vencedor != null){
            JOptionPane.showMessageDialog(this, "O jogador Vencedor é " + vencedor.nome + " com " + vencedor.getPontos() + " pontos");
            trocarJanela(vwInicial);
        }
        else{
            JOptionPane.showMessageDialog(this, "Você perdeu, mais sorte da proxima vez, looser");
            trocarJanela(vwInicial);
        }
        
    }

    /*
    @Override
    public void acabouEtapa(RodaRodaEvent evento) {
        for (ContainerJogador container : containers) {
            container.setPontosNaRoda("0");
        }
    }
     */
    private void atualizar(JSONObject dados) {
        if (dados.get("palavra") != null) {
            String palavra = (String) dados.get("palavra");
            lbPalavraSecreta.setText(palavra);
        }
        if (dados.get("erros") != null) {
            String erros = (String) dados.get("erros");
            lbErrosValue.setText(erros);
        }
        if (dados.get("restante") != null) {
            String restante = (String) dados.get("restante");
            lbRestante.setText(restante);
        }
    }

    @Override
    public void iniciouEtapa(String palavra, String categoria, String restante) {
        lbPalavraSecreta.setText(palavra);
        lbCategoriaValue.setText(categoria);
        lbRestante.setText(restante);
        lbErrosValue.setText("");
        proximo();
        trava(true);
    }

    private void trocarJanela(JFrame janela) {
        this.setVisible(false);
        janela.setSize(this.getSize());
        janela.setLocationRelativeTo(this);
        janela.setVisible(true);
    }

    @Override
    public void palavraDescoberta() {
        jogadorAtual.somarPontos();
        controllerRodaRoda.palavraDescoberta();
        if(!this.gameover)
            JOptionPane.showMessageDialog(this, "Parabens "+jogadorAtual.nome+" você"
                    + " acertou a palavra e ganhou os pontos acumulados na rodada");
        
    }
}
